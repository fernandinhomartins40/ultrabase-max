name: Deploy Ultrabase to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Dependencies and Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.5'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Validate package.json and dependencies
        run: |
          echo "🔍 Validating package.json..."
          if ! pnpm exec json-validate package.json; then
            echo "❌ package.json is invalid"
            exit 1
          fi
          
          echo "📦 Checking pnpm-lock.yaml integrity..."
          if [ ! -f pnpm-lock.yaml ]; then
            echo "❌ pnpm-lock.yaml not found"
            exit 1
          fi

      - name: Install dependencies (dry-run)
        run: |
          echo "🔄 Testing dependency installation..."
          pnpm install --frozen-lockfile --dry-run

      - name: Validate Dockerfile
        run: |
          echo "🐳 Validating Dockerfile..."
          if [ ! -f Dockerfile ]; then
            echo "❌ Dockerfile not found"
            exit 1
          fi
          
          # Check for common Dockerfile issues
          if ! grep -q "FROM node:22-alpine" Dockerfile; then
            echo "❌ Dockerfile doesn't use expected base image"
            exit 1
          fi
          
          if ! grep -q "pnpm@9.15.5" Dockerfile; then
            echo "❌ Dockerfile doesn't use expected pnpm version"
            exit 1
          fi

      - name: Validate Turbo configuration
        run: |
          echo "⚙️ Validating turbo.json..."
          if ! pnpm exec json-validate turbo.json; then
            echo "❌ turbo.json is invalid"
            exit 1
          fi

      - name: Check studio app structure
        run: |
          echo "📂 Checking studio app structure..."
          if [ ! -f apps/studio/package.json ]; then
            echo "❌ Studio app package.json not found"
            exit 1
          fi
          
          if [ ! -f apps/studio/next.config.js ]; then
            echo "❌ Studio app next.config.js not found"
            exit 1
          fi

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false

      - name: Test built image
        run: |
          echo "🧪 Testing built Docker image..."
          docker run --rm -d -p 3001:3000 --name test-container ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          
          # Wait for container to start
          sleep 30
          
          # Test if container is healthy
          if ! curl -f http://localhost:3001/api/health >/dev/null 2>&1; then
            echo "❌ Container health check failed"
            docker logs test-container
            docker stop test-container || true
            exit 1
          fi
          
          echo "✅ Container health check passed"
          docker stop test-container

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pre-deployment Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          timeout: 60s
          script: |
            echo "🔍 Verificando conectividade com VPS..."
            echo "📅 Data/Hora: $(date)"
            echo "💾 Espaço em disco disponível:"
            df -h /
            echo "🐳 Docker version: $(docker --version)"
            echo "📊 Containers ativos:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Check if we have enough disk space (at least 2GB free)
            available_space=$(df / | tail -1 | awk '{print $4}')
            if [ "$available_space" -lt 2097152 ]; then
              echo "❌ Insufficient disk space. Available: ${available_space}KB"
              exit 1
            fi
            
            echo "✅ Pre-deployment checks passed"

      - name: Deploy Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          timeout: 600s
          script: |
            set -e
            echo "🚀 Iniciando deploy da Ultrabase..."
            echo "📦 Imagem: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"
            
            # Create backup before deploy
            if [ -d "/opt/ultrabase" ] && [ -f "/opt/ultrabase/docker-compose.yml" ]; then
              echo "💾 Criando backup antes do deploy..."
              mkdir -p /opt/ultrabase/backups
              backup_file="/opt/ultrabase/backups/pre-deploy-$(date +%Y%m%d_%H%M%S).tar.gz"
              tar -czf "$backup_file" -C /opt/ultrabase . --exclude=backups --exclude=logs || true
            fi
            
            # Download do script de setup
            echo "📥 Baixando script de setup..."
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/deploy/setup.sh -o /tmp/setup.sh
            chmod +x /tmp/setup.sh
            
            # Executar deploy
            echo "⚙️  Executando deploy..."
            /tmp/setup.sh "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"
            
            # Cleanup
            rm -f /tmp/setup.sh

      - name: Comprehensive Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          timeout: 180s
          script: |
            echo "🔍 Iniciando verificação completa de saúde..."
            
            # Aguardar estabilização
            echo "⏳ Aguardando estabilização dos serviços (30s)..."
            sleep 30
            
            # Verificar containers
            echo "📊 Status dos containers:"
            docker-compose -f /opt/ultrabase/docker-compose.yml ps
            
            # Verificar logs recentes
            echo "📋 Logs recentes da aplicação:"
            docker-compose -f /opt/ultrabase/docker-compose.yml logs --tail=10 ultrabase
            
            # Health checks progressivos
            echo "🏥 Verificações de saúde:"
            
            # Verificar se containers estão rodando
            if ! docker-compose -f /opt/ultrabase/docker-compose.yml ps | grep -q "Up"; then
              echo "❌ Containers não estão rodando corretamente"
              docker-compose -f /opt/ultrabase/docker-compose.yml logs --tail=50
              exit 1
            fi
            
            # Verificar endpoint de saúde
            for i in {1..12}; do
              echo "🔄 Tentativa $i/12 - Verificando endpoint de saúde..."
              
              if curl -f -s -m 10 http://localhost/health >/dev/null 2>&1; then
                echo "✅ Endpoint /health respondendo!"
                
                # Verificar aplicação principal
                if curl -f -s -m 10 http://localhost >/dev/null 2>&1; then
                  echo "✅ Aplicação principal respondendo!"
                  echo "🎉 Deploy concluído com sucesso!"
                  echo "🌐 Aplicação disponível em: http://31.97.85.98"
                  exit 0
                else
                  echo "⚠️  Endpoint de saúde OK, mas aplicação principal não responde"
                fi
              else
                echo "⏳ Endpoint não disponível ainda, aguardando..."
              fi
              
              sleep 10
            done
            
            echo "❌ Falha na verificação do deploy após 2 minutos"
            echo "📋 Logs de debug:"
            docker-compose -f /opt/ultrabase/docker-compose.yml logs --tail=50
            exit 1

      - name: Deployment Summary
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          timeout: 30s
          script: |
            echo "📊 RESUMO DO DEPLOY"
            echo "=================="
            echo "📅 Data: $(date)"
            echo "📦 Imagem: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"
            echo "🏥 Status dos serviços:"
            docker-compose -f /opt/ultrabase/docker-compose.yml ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}" || echo "Erro ao obter status"
            echo ""
            echo "💾 Uso de recursos:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" || echo "Erro ao obter stats"
