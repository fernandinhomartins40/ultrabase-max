# Use Node.js 22 LTS with Alpine for smaller size
FROM node:22-alpine AS base

# Install pnpm and system dependencies for native modules
RUN npm install -g pnpm@9.15.5 && \
    apk add --no-cache \
    curl \
    python3 \
    make \
    g++ \
    libc6-compat \
    vips-dev \
    cairo-dev \
    pango-dev \
    jpeg-dev \
    giflib-dev \
    librsvg-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    sqlite-dev \
    postgresql-dev

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy workspace package.json files
COPY apps/studio/package.json ./apps/studio/
COPY packages/*/package.json ./packages/*/

# Install dependencies with better error handling
RUN pnpm install --frozen-lockfile --prefer-offline || \
    (echo "Install failed with frozen lockfile, trying without..." && \
     pnpm install --prefer-offline)

# Copy source code
COPY . .

# Build the application
RUN pnpm build:studio

# Production stage
FROM node:22-alpine AS production

# Install pnpm and runtime dependencies
RUN npm install -g pnpm@9.15.5 && \
    apk add --no-cache \
    curl \
    vips \
    cairo \
    pango \
    sqlite \
    postgresql-client

WORKDIR /app

# Copy built application
COPY --from=base /app/apps/studio/.next ./.next
COPY --from=base /app/apps/studio/package.json ./package.json
COPY --from=base /app/apps/studio/next.config.* ./
COPY --from=base /app/apps/studio/public ./public
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/packages ./packages

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Change ownership
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["pnpm", "start"]
